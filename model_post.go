/*
 * Swagger Dummy Posts
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Post struct for Post
type Post struct {
	Id int64 `json:"id"`
	UserId *int64 `json:"userId,omitempty"`
	Title *string `json:"title,omitempty"`
	Body *string `json:"body,omitempty"`
}

// NewPost instantiates a new Post object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPost(id int64, ) *Post {
	this := Post{}
	this.Id = id
	return &this
}

// NewPostWithDefaults instantiates a new Post object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostWithDefaults() *Post {
	this := Post{}
	return &this
}

// GetId returns the Id field value
func (o *Post) GetId() int64 {
	if o == nil  {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Post) GetIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Post) SetId(v int64) {
	o.Id = v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *Post) GetUserId() int64 {
	if o == nil || o.UserId == nil {
		var ret int64
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Post) GetUserIdOk() (*int64, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *Post) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int64 and assigns it to the UserId field.
func (o *Post) SetUserId(v int64) {
	o.UserId = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *Post) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Post) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *Post) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *Post) SetTitle(v string) {
	o.Title = &v
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *Post) GetBody() string {
	if o == nil || o.Body == nil {
		var ret string
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Post) GetBodyOk() (*string, bool) {
	if o == nil || o.Body == nil {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *Post) HasBody() bool {
	if o != nil && o.Body != nil {
		return true
	}

	return false
}

// SetBody gets a reference to the given string and assigns it to the Body field.
func (o *Post) SetBody(v string) {
	o.Body = &v
}

func (o Post) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.UserId != nil {
		toSerialize["userId"] = o.UserId
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.Body != nil {
		toSerialize["body"] = o.Body
	}
	return json.Marshal(toSerialize)
}

type NullablePost struct {
	value *Post
	isSet bool
}

func (v NullablePost) Get() *Post {
	return v.value
}

func (v *NullablePost) Set(val *Post) {
	v.value = val
	v.isSet = true
}

func (v NullablePost) IsSet() bool {
	return v.isSet
}

func (v *NullablePost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePost(val *Post) *NullablePost {
	return &NullablePost{value: val, isSet: true}
}

func (v NullablePost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


